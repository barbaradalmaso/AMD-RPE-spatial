FeaturePlot(EC, features = c("Top2a", "Mki67", "Angpt2", "Pdgfb", "Kdr", "Vegfa", "Pafah1b1", "Lpcat1", "Pafah1b3"))
EC <- RunUMAP(EC, dims = 1:5, min.dist = 0.1, spread = 1)
# Defina os genes de proliferação endotelial
genes <- c("Hmgb2", "Pclaf", "Birc5", "Top2a", "Mki67", "Tuba1b", "Tubb4b", "Ube2c", "Hist1h1b", "Cks1b",
"Cks2", "Cdca8", "Tpx2", "Cenpa", "Cdk1", "H2afz", "Smc2", "Ran", "Cenpe", "Cdc20", "Smc4",
"Selenoh", "Cenpf", "Nasp", "Stmn1", "Tyms", "Prc1", "Ccnb2", "Rrm1", "Tubb6", "Ranbp1", "Tk1",
"Anp32e", "Tmpo", "Hmmr", "Ccdc34", "Cdca3", "Kif23", "Nme1", "Hmgn2", "Spc24", "Tubb5",
"Ncl", "Knstrn", "Hmgb1", "Nucks1", "Dctpp1", "Incenp", "Kif15", "Hspd1")
# Calcule o escore de proliferação para cada célula endotelial
EC <- AddModuleScore(EC, features = list(genes), name = "ProlifScore")
# Verifique o escore
head(EC@meta.data$ProlifScore1)
# Defina um limiar para distinguir células proliferativas e quiescentes
# Atribua identidades de "proliferativa" ou "quiescente" com base no escore de proliferação
EC$ProlifStatus <- ifelse(EC@meta.data$ProlifScore1 > 0.25,
"Proliferative", "Quiescent")
# Visualize a nova classificação no UMAP
DimPlot(EC, reduction = "umap", group.by = "ProlifStatus",
label = FALSE, pt.size = 1.5,
cols = c("Proliferative" = "#664918", "Quiescent" = "#EEAA39"))
EC <- RunUMAP(EC, dims = 1:5, min.dist = 0.1, spread = 0.5)
# Visualize a nova classificação no UMAP
DimPlot(EC, reduction = "umap", group.by = "ProlifStatus",
label = FALSE, pt.size = 1.5,
cols = c("Proliferative" = "#664918", "Quiescent" = "#EEAA39"))
EC <- RunUMAP(EC, dims = 1:5, min.dist = 0.1, spread = 0.8)
# Visualize a nova classificação no UMAP
DimPlot(EC, reduction = "umap", group.by = "ProlifStatus",
label = FALSE, pt.size = 1.5,
cols = c("Proliferative" = "#664918", "Quiescent" = "#EEAA39"))
EC <- RunUMAP(EC, dims = 1:5, min.dist = 0.1, spread = 0.1)
# Visualize a nova classificação no UMAP
DimPlot(EC, reduction = "umap", group.by = "ProlifStatus",
label = FALSE, pt.size = 1.5,
cols = c("Proliferative" = "#664918", "Quiescent" = "#EEAA39"))
EC <- RunUMAP(EC, dims = 1:5, min.dist = 0.1, spread = 0.5)
EC <- RunUMAP(EC, dims = 1:5, min.dist = 0.1, spread = 0.5)
# Visualize a nova classificação no UMAP
DimPlot(EC, reduction = "umap", group.by = "ProlifStatus",
label = FALSE, pt.size = 1.5,
cols = c("Proliferative" = "#664918", "Quiescent" = "#EEAA39"))
# Visualize a nova classificação no UMAP
DimPlot(EC, reduction = "umap", group.by = "ProlifStatus",
label = FALSE, pt.size = 2,
cols = c("Proliferative" = "#664918", "Quiescent" = "#EEAA39"))
# Visualize a nova classificação no UMAP
DimPlot(EC, reduction = "umap", group.by = "ProlifStatus",
label = FALSE, pt.size = 1.8,
cols = c("Proliferative" = "#664918", "Quiescent" = "#EEAA39"))
# Visualize a expressão de genes selecionados
FeaturePlot(EC, features = c("Top2a", "Mki67", "Angpt2", "Pdgfb", "Kdr", "Vegfa", "Pafah1b1", "Lpcat1", "Pafah1b3"))
getwd()
load("~/.RData")
load("~/.RData")
# ------------ Part 1: Quality Control -----------------
# Load packages
library(Seurat)
library(SeuratObject)
library(dplyr)
library(patchwork)
# Load datasets
p6.data <- Read10X(data.dir = "/Users/barbaradalmaso/Desktop/Seurat/GSE175895_RAW/p6/")
p6 <- CreateSeuratObject(counts = p6.data, project = "Retinal-Development", min.cells = 3, min.features = 200)
# Calcular porcentagem de genes mitocondriais por amostra e filtrar células abaixo do padrão de qualidade (quantidade de features únicos de cada célula (ideal entre > 200 e < 2000), % de cromossomos mitocondtiais (< 5%))
p6 <- subset(p6, subset = nFeature_RNA > 200)
# Normalização em log e em escala
p6 <- NormalizeData(p6)
all.genes <- rownames(p6)
p6 <- ScaleData(p6, features = all.genes)
p6 <- FindVariableFeatures(p6)
# Fazer PCA
p6 <- RunPCA(p6, features = VariableFeatures(object = p6))
p6 <- FindNeighbors(p6, dims = 1:10)
p6 <- FindClusters(p6, resolution = 0.5)
p6 <- RunUMAP(p6, dims = 1:10)
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DimPlot(p6, reduction = "umap")
saveRDS(p6, file = "../p6_tutorial.rds")
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DimPlot(p6, reduction = "umap")
# Plotar o UMAP com os clusters
DimPlot(p6, reduction = "umap", label = F)
# Agora vamos identificar cada um dos  marcadores para todos os nossos 11 clusters. O parâmetro only.pos = TRUE garante que apenas os marcadores com expressão positiva (sobre-expressos) em cada cluster sejam considerados. min.pct = 0.25 define que o gene deve estar expresso em pelo menos 25% das células de um cluster para ser considerado um marcador e logfc.threshold = 0.25 define o limite mínimo de mudança de expressão para incluir um gene
p6_markers <- FindAllMarkers(p6, only.pos = TRUE, min.pct = 0.75, logfc.threshold = 0.5)
ElbowPlot(p6)
p6 <- FindNeighbors(p6, dims = 1:14)
p6 <- FindClusters(p6, resolution = 0.5)
p6 <- FindClusters(p6, resolution = 0.2)
p6 <- FindClusters(p6, resolution = 0.15)
p6 <- FindClusters(p6, resolution = 0.1)
p6 <- FindClusters(p6, resolution = 0.13)
p6 <- RunUMAP(p6, dims = 1:10)
# Plotar o UMAP com os clusters
DimPlot(p6, reduction = "umap", label = F)
# Após identificar as celulas (com base no paper e nos genes marcadores), vou mudar os nomes e tirar o cluster 0 porque achei ele esquisito
# Definir os novos nomes dos clusters
new_names <- c("Tirar", "Rods", "Endothelial Cells", "Cones",
"Müller Glia","RPE", "Ganglion Cells", "Progenitor Cells",
"Astrocytes", "Bipolar", "Amacrine")
# Mudar os nomes dos clusters e remover cluster 0 porque achei ele estranho
levels(p6@active.ident) <- new_names
p6 <- subset(p6, idents = "Tirar", invert = TRUE)
# Plot final
DimPlot(p6, reduction = "umap", label = F, pt.size = 0.3)
FeaturePlot(p6, features = c("Vegfr2"))
FeaturePlot(p6, features = c("Ptafr"))
# ------------ Part 2: Selecionar células endoteliais e subclassificar -----------------
EC <- subset(p6, idents = "Endothelial Cells")
EC <- RunUMAP(EC, dims = 1:15, min.dist = 1, spread = 1)
DimPlot(EC, reduction = "umap", label = F, pt.size = 2)
# Defina os genes de proliferação endotelial
genes <- c("Hmgb2", "Pclaf", "Birc5", "Top2a", "Mki67", "Tuba1b", "Tubb4b", "Ube2c", "Hist1h1b", "Cks1b",
"Cks2", "Cdca8", "Tpx2", "Cenpa", "Cdk1", "H2afz", "Smc2", "Ran", "Cenpe", "Cdc20", "Smc4",
"Selenoh", "Cenpf", "Nasp", "Stmn1", "Tyms", "Prc1", "Ccnb2", "Rrm1", "Tubb6", "Ranbp1", "Tk1",
"Anp32e", "Tmpo", "Hmmr", "Ccdc34", "Cdca3", "Kif23", "Nme1", "Hmgn2", "Spc24", "Tubb5",
"Ncl", "Knstrn", "Hmgb1", "Nucks1", "Dctpp1", "Incenp", "Kif15", "Hspd1")
# Calcule o escore de proliferação para cada célula endotelial
EC <- AddModuleScore(EC, features = list(genes), name = "ProlifScore")
# Verifique o escore
head(EC@meta.data$ProlifScore1)
# Defina um limiar para distinguir células proliferativas e quiescentes
# Atribua identidades de "proliferativa" ou "quiescente" com base no escore de proliferação
EC$ProlifStatus <- ifelse(EC@meta.data$ProlifScore1 > 0.25,
"Proliferative", "Quiescent")
# Visualize a nova classificação no UMAP
DimPlot(EC, reduction = "umap", group.by = "ProlifStatus",
label = FALSE, pt.size = 1,
cols = c("Proliferative" = "#664918", "Quiescent" = "#EEAA39"))
# Visualize a expressão de genes selecionados
FeaturePlot(p6, features = c("Top2a", "Mki67", "Angpt2", "Pdgfb", "Kdr", "Vegfb", "Pafah1b1", "Lpcat2", "Pafah1b2"))
# Visualize a expressão de genes selecionados
FeaturePlot(EC, features = c("Top2a", "Mki67", "Angpt2", "Pdgfb", "Kdr", "Vegfb", "Pafah1b1", "Lpcat2", "Pafah1b2"))
# -------------- Part 3: Fazer o mesmo com as células de retina em estágio P10 ---------------
# Load datasets
p10.data <- Read10X(data.dir = "/Users/barbaradalmaso/Desktop/Seurat/GSE175895_RAW/p10/")
# ------------ Part 1: Quality Control -----------------
# Load packages
library(Seurat)
library(SeuratObject)
library(dplyr)
library(patchwork)
# Load datasets
p6.data <- Read10X(data.dir = "/Users/barbaradalmaso/Desktop/Seurat/GSE175895_RAW/p6/")
# ------------ Part 6: Análise da expressão de alguns genes nas diferentes células da retina -----------------
p6.data <- Read10X(data.dir = "/Users/barbaradalmaso/Desktop/Seurat/GSE175895_RAW/p6/")
p10.data <- Read10X(data.dir = "/Users/barbaradalmaso/Desktop/Seurat/GSE175895_RAW/p10/")
p6.data <- CreateSeuratObject(counts = p6.data, project = "Retinal-Development", min.cells = 3, min.features = 200)
# Calcular porcentagem de genes mitocondriais por amostra e filtrar células abaixo do padrão de qualidade (quantidade de features únicos de cada célula (ideal entre > 200 e < 2000), % de cromossomos mitocondtiais (< 5%))
p6.data <- subset(p6, subset = nFeature_RNA > 200)
# Calcular porcentagem de genes mitocondriais por amostra e filtrar células abaixo do padrão de qualidade (quantidade de features únicos de cada célula (ideal entre > 200 e < 2000), % de cromossomos mitocondtiais (< 5%))
p6.data <- subset(p6.data, subset = nFeature_RNA > 200)
p10.data
p10.data <- CreateSeuratObject(counts = p10.data, project = "Retinal-Development", min.cells = 3, min.features = 200)
p10.data <- subset(p10.data, subset = nFeature_RNA > 200)
# Fazer o merge de ambos os arquivos seurat
scdata <- merge(p6.data, y = p10.data, add.cell.ids = c("P6", "P10"), project = "MergedProject")
scdata <- NormalizeData(scdata)
scdata <- FindVariableFeatures(scdata)
scdata <- ScaleData(scdata)
scdata <- RunPCA(scdata)
# UMAP ou t-SNE
scdata <- RunUMAP(scdata, dims = 1:10)
DimPlot(scdata, reduction = "umap")
scdata <- RunPCA(scdata, features = VariableFeatures(object = scdata))
ElbowPlot(scdata)
scdata <- FindNeighbors(scdata, dims = 1:14)  # Tente usar mais PCs, como 1:10 ou 1:15
p10 <- FindClusters(p10, resolution = 0.2)  # Aumente a resolução para 0.5 ou mais
scdata <- FindClusters(scdata, resolution = 0.2)  # Aumente a resolução para 0.5 ou mais
scdata <- RunUMAP(scdata, dims = 1:10, min.dist = 0.01, spread = 1)
# Plotar o UMAP com os clusters
DimPlot(scdata, reduction = "umap", label = F)
sc_markers <- FindAllMarkers(scdata, only.pos = TRUE, min.pct = 0.75, logfc.threshold = 0.5)
scdata <- JoinLayers(scdata)
sc_markers <- FindAllMarkers(scdata, only.pos = TRUE, min.pct = 0.75, logfc.threshold = 0.5)
top10 <- p6_markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_log2FC)
top10 <- sc_markers %>% group_by(cluster) %>% top_n(n = 10, wt = avg_log2FC)
View(top10)
gene[1:7, 7]
top[1:7, 7]
top10[1:7, 7]
top10[8:12, 7]
top10[13:22, 7]
top10[23:22, 7]
top10[23:32, 7]
top10[33:42, 7]
top10[43:51, 7]
top10[52:61, 7]
top10[62:65, 7]
top10[66:75, 7]
top10[76:85, 7]
top10[8:12, 7]
new_names <- c("Rods","X", "Cones", "Bipolar", "Horizontal",
"Müller", "Glia", "Imune Cells", "Amacrine",
"Endothelial Cells", "RGCs")
# Mudar os nomes dos clusters e remover cluster 0 porque achei ele estranho
levels(scdata@active.ident) <- new_names
scdata <- subset(scdata, idents = c("X"), invert = TRUE)
# Plotar o UMAP com os clusters
DimPlot(scdata, reduction = "umap", label = F)
# Load packages.
library(Seurat)
library(SeuratData)
install.packages(SeuratData)
devtools::install_github('satijalab/seurat-data')
library(SeuratData)
library(ggplot2)
library(patchwork)
library(scales)
library(dplyr)
library(reshape2)
# Download dataset using SeuratData.
InstallData(ds = "thp1.eccite")
> AvailableData()
AvailableData()
thp1.eccite.SeuratData
thp1.eccite
UpdateSeuratObject(thp1.eccite)
DefaultAssay(object = eccite) <- 'RNA'
eccite <- LoadData(ds = "thp1.eccite")
View(eccite)
View(eccite)
eccite@meta.data
colnames(eccite@meta.data)
test <- eccite@meta.data
View(test)
View(test)
table(eccite@meta.data$crispr)
eccite <- LoadData(ds = "thp1.eccite")
# Verifique os níveis disponíveis no meta.data$crispr
table(eccite@meta.data$crispr)
# Filtrar células que têm o valor "NT" no meta.data$crispr
cells_NT <- rownames(eccite@meta.data[eccite@meta.data$crispr == "NT", ])
# Subset do objeto Seurat com as células selecionadas
eccite_NT <- subset(eccite, cells = cells_NT
# Subset do objeto Seurat com as células selecionadas
eccite_NT <- subset(eccite, cells = cells_NT)
# Subset do objeto Seurat com as células selecionadas
eccite_NT <- subset(eccite, cells = cells_NT)
View(eccite_NT)
table(eccite_NT@meta.data$crispr)
test <- eccite_NT@meta.data
View(test)
table(eccite_NT@meta.data$guide_ID)
table(eccite_NT@meta.data$con)
table(eccite_NT@meta.data$gene)
table(eccite_NT@meta.data$gNT)
table(eccite_NT@meta.data$NT)
# Load packages
library(Seurat)
library(SeuratData)
library(ggplot2)
library(patchwork)
library(scales)
library(dplyr)
library(reshape2)
# Setup custom theme for plotting.
custom_theme <- theme(
plot.title = element_text(size=16, hjust = 0.5),
legend.key.size = unit(0.7, "cm"),
legend.text = element_text(size = 14))
# Load object.
eccite <- LoadData(ds = "thp1.eccite")
# Normalize protein.
eccite <- NormalizeData(
object = eccite,
assay = "ADT",
normalization.method = "CLR",
margin = 2)
## RNA-based clustering is driven by confounding sources of variation
# Prepare RNA assay for dimensionality reduction:
# Normalize data, find variable features and scale data.
DefaultAssay(object = eccite) <- 'RNA'
eccite <- NormalizeData(object = eccite) %>% FindVariableFeatures() %>% ScaleData()
# Run Principle Component Analysis (PCA) to reduce the dimensionality of the data.
eccite <- RunPCA(object = eccite)
# Run Uniform Manifold Approximation and Projection (UMAP) to visualize clustering in 2-D.
eccite <- RunUMAP(object = eccite, dims = 1:40)
## Calculating local perturbation signatures mitigates confounding effects
# Calculate perturbation signature (PRTB).
eccite<- CalcPerturbSig(
object = eccite,
assay = "RNA",
slot = "data",
gd.class ="gene",
nt.cell.class = "NT",
reduction = "pca",
ndims = 40,
num.neighbors = 20,
split.by = "replicate",
new.assay.name = "PRTB")
# Prepare PRTB assay for dimensionality reduction:
# Normalize data, find variable features and center data.
DefaultAssay(object = eccite) <- 'PRTB'
# Use variable features from RNA assay.
VariableFeatures(object = eccite) <- VariableFeatures(object = eccite[["RNA"]])
eccite <- ScaleData(object = eccite, do.scale = F, do.center = T)
# Run PCA to reduce the dimensionality of the data.
eccite <- RunPCA(object = eccite, reduction.key = 'prtbpca', reduction.name = 'prtbpca')
# Run UMAP to visualize clustering in 2-D.
eccite <- RunUMAP(
object = eccite,
dims = 1:40,
reduction = 'prtbpca',
reduction.key = 'prtbumap',
reduction.name = 'prtbumap')
## Mixscape identifies cells with no detectable perturbation
# Run mixscape.
eccite <- RunMixscape(
object = eccite,
assay = "PRTB",
slot = "scale.data",
labels = "gene",
nt.class.name = "NT",
min.de.genes = 5,
iter.num = 10,
de.assay = "RNA",
verbose = F,
prtb.type = "KO")
install.packages('mixtools')
## Mixscape identifies cells with no detectable perturbation
# Run mixscape.
eccite <- RunMixscape(
object = eccite,
assay = "PRTB",
slot = "scale.data",
labels = "gene",
nt.class.name = "NT",
min.de.genes = 5,
iter.num = 10,
de.assay = "RNA",
verbose = F,
prtb.type = "KO")
# Calculate percentage of KO cells for all target gene classes.
df <- prop.table(table(eccite$mixscape_class.global, eccite$NT),2)
df2 <- reshape2::melt(df)
df2$Var2 <- as.character(df2$Var2)
test <- df2[which(df2$Var1 == "KO"),]
test <- test[order(test$value, decreasing = T),]
new.levels <- test$Var2
df2$Var2 <- factor(df2$Var2, levels = new.levels )
df2$Var1 <- factor(df2$Var1, levels = c("NT", "NP", "KO"))
df2$gene <- sapply(as.character(df2$Var2), function(x) strsplit(x, split = "g")[[1]][1])
df2$guide_number <- sapply(as.character(df2$Var2),
function(x) strsplit(x, split = "g")[[1]][2])
df3 <- df2[-c(which(df2$gene == "NT")),]
# plot perturbation correction
q1 <- DimPlot(
object = eccite,
group.by = 'replicate',
reduction = 'prtbumap',
pt.size = 0.2, cols = "Dark2", label = F, repel = T) +
scale_color_brewer(palette = "Dark2") +
ggtitle("Biological Replicate") +
ylab("UMAP 2") +
xlab("UMAP 1") +
custom_theme
q2 <- DimPlot(
object = eccite,
group.by = 'Phase',
reduction = 'prtbumap',
pt.size = 0.2, label = F, repel = T) +
ggtitle("Cell Cycle Phase") +
ylab("UMAP 2") +
xlab("UMAP 1") +
custom_theme
q3 <- DimPlot(
object = eccite,
group.by = 'crispr',
reduction = 'prtbumap',
split.by = "crispr",
ncol = 1,
pt.size = 0.2,
cols = c("grey39","goldenrod3")) +
ggtitle("Perturbation Status") +
ylab("UMAP 2") +
xlab("UMAP 1") +
custom_theme
pdf("papalexi_thp1_perturbation_cor_umap.pdf")
(q1 / q2 + plot_layout(guides = 'auto') | q3)
dev.off()
## Identification of highly variable features
Idents(object = eccite) <- "Phase"
# Subset on a value in the object meta data, only get NT controls
nt = subset(x = eccite, subset = NT == "NT")
nt = SCTransform(nt)
nt <- FindVariableFeatures(nt, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top <- head(VariableFeatures(nt), 50)
write.csv(data.frame(top50=top), "papalexi2021_thp1_nt_top50_var_genes.csv")
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(nt)
plot2 <- LabelPoints(plot = plot1, points = top, repel = TRUE)
pdf("papalexi_thp1_nt_var_genes.pdf", width=14, height=7)
DimPlot(nt) + plot2
dev.off()
pdf("papalexi_thp1_nt_var_genes_umap.pdf", width=14, height=10)
FeaturePlot(nt, features = top[1:12])
dev.off()
pdf("papalexi_thp1_nt_var_genes_umap2.pdf", width=14, height=16)
FeaturePlot(nt, features = top[13:30])
dev.off()
FeaturePlot(nt, features = top[13:30])
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(nt)
plot2 <- LabelPoints(plot = plot1, points = top, repel = TRUE)
pdf("papalexi_thp1_nt_var_genes.pdf", width=14, height=7)
DimPlot(nt) + plot2
View(plot1)
View(plot2)
FeaturePlot(nt, features = top[13:30])
DimPlot(nt) + plot2
DimPlot(nt)
plot2 <- LabelPoints(plot = plot1, points = top, repel = TRUE)
View(plot2)
DimPlot(plot2)
plot2
View(plot2)
LabelPoints(plot = plot1, points = top, repel = TRUE)
VariableFeaturePlot(nt)
dev.off()
plot1 <- VariableFeaturePlot(nt)
plot2 <- LabelPoints(plot = plot1, points = top, repel = TRUE)
pdf("papalexi_thp1_nt_var_genes.pdf", width=14, height=7)
DimPlot(nt) + plot2
# Plot variable features with and without labels
plot1 <- VariableFeaturePlot(nt)
plot2 <- LabelPoints(plot = plot1, points = top, repel = TRUE)
# Visualize the plots directly in R
plot1
plot2
# Optionally, combine with DimPlot for additional visualization
DimPlot(nt) + plot2
library(leaflet)
install.packages("leaflet")
library(leaflet)
# Latitude e Longitude das localizações
lats <- c(29.717, -23.561, 52.276)  # Rice University, USP, Leibniz Institut
longs <- c(-95.402, -46.734, 10.526)  # Rice University, USP, Leibniz Institut
# Nomes das instituições
places <- c('Rice University', 'USP - Butantã', 'Leibniz Institute')
# Adicionar cores para as localizações
statecolor <- c("blue", "green", "red")
# Criar um dataframe
df <- data.frame(lat = lats, lng = longs, places = places, statecolor = statecolor)
# Criar o mapa
df %>% leaflet() %>%
addTiles() %>%
addCircleMarkers(color = df$statecolor, popup = df$places, radius = 8) %>%  # Ajuste o raio conforme necessário
addLegend(labels = df$places, colors = statecolor, title = "Instituições") %>%
addProviderTiles(providers$OpenStreetMap)
# Instalar pacotes necessários (caso ainda não estejam instalados)
if (!require("igraph")) install.packages("igraph")
if (!require("ggplot2")) install.packages("ggplot2")
if (!require("readxl")) install.packages("readxl")
library(igraph)
library(ggplot2)
library(readxl)
# Carregar o arquivo Excel com palavras e frequências
df <- read_excel("filtered_words.xlsx")
getwd()
# Carregar o arquivo Excel com palavras e frequências
df <- read_excel(path = "/Users/barbaradalmaso/Desktop/filtered_words.xlsx")
# Lista de palavras selecionadas
selected_words <- c(
'expression', 'receptor', 'corneal', 'cancer', 'retina', 'progenitor', 'platelet', 'epithelium', 'tissue',
'proliferation', 'carcinoma', 'development', 'neurospheres', 'growth', 'protein', 'signaling', 'differentiation',
'inflammation', 'irradiation', 'neuronal', 'transcriptional', 'synaptic', 'degeneration', 'neovascularization',
'diabetic', 'healing', 'retinopathy', 'endothelial', 'pathway', 'apoptosis', 'cellular', 'nuclear', 'transcripts',
'prostaglandins', 'phospholipids', 'migration', 'lipids', 'mammalian', 'regulates', 'allergic', 'embryonic',
'pathways', 'diseases', 'angiogenesis', 'mechanisms', 'microrna', 'phospholipase', 'survival', 'binding', 'tumors',
'cyclin', 'express', 'pluripotent', 'regenerative', 'transfected', 'molecular', 'immunology', 'infiltration',
'neurogenesis', 'degradation', 'repopulation', 'immune', 'reprogramming', 'maturation', 'apoptotic', 'biogenesis',
'transplantation', 'signal', 'proinflammatory', 'kinase', 'cytokines', 'stress', 'randomized', 'regeneration',
'catabolism', 'vesicle', 'contrast', 'statistically'
)
# Filtrar para palavras selecionadas e manter as 30 mais frequentes
filtered_df <- df[df$Word %in% selected_words, ]
filtered_df <- filtered_df[order(-filtered_df$Frequency), ][1:30, ]
# Criar o grafo
g <- graph_from_data_frame(d = NULL, vertices = filtered_df, directed = FALSE)
View(df)
View(filtered_df)
# Criar o grafo
g <- graph_from_data_frame(d = NULL, vertices = filtered_df, directed = FALSE)
# Criar o grafo
g <- graph_from_data_frame(d = filtered_df, vertices = filtered_df, directed = FALSE)
# Criar grafo apenas com os vértices inicialmente
g <- graph.empty(directed = FALSE) + vertices(filtered_df$Word)
# Adicionar arestas conectando todos os nós (opcional, para gerar conexões genéricas)
for (i in 1:nrow(filtered_df)) {
for (j in (i+1):nrow(filtered_df)) {  # Evitar duplicar conexões
g <- add_edges(g, c(filtered_df$Word[i], filtered_df$Word[j]))
}
}
setwd("/Users/barbaradalmaso/Desktop/AMD-RPE-spatial")
# Carregar as bibliotecas
library(Seurat)
library(SeuratDisk)
install.packages("SeuratDisk")
if (!requireNamespace("remotes", quietly = TRUE)) {
install.packages("remotes")
}
remotes::install_github("mojaveazure/seurat-disk")
# Carregar as bibliotecas
library(Seurat)
library(SeuratDisk)
# Carregar os dados (supondo que você converta seus arquivos h5ad para rds ou use SeuratDisk)
# Carregue os dados espaciais e convencionais
# Usando SeuratDisk para converter diretamente .h5ad para objetos Seurat
Convert("/Users/barbaradalmaso/Desktop/AMD-RPE-spatial/Dados/filtered_spatialdata.h5ad", dest = "rds", overwrite = TRUE)
